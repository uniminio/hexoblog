<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>打工人的自我修养-后端-03——基于MyBatis-Plus的简单登录实现</title>
      <link href="/hexoblog/2022/11/03/42805abca722/"/>
      <url>/hexoblog/2022/11/03/42805abca722/</url>
      
        <content type="html"><![CDATA[<h1 id="1-MyBatis-Plus"><a href="#1-MyBatis-Plus" class="headerlink" title="1. MyBatis-Plus"></a>1. <a href="https://baomidou.com/">MyBatis-Plus</a></h1><p>这个项目能帮助我们快速的生成简单的业务代码，就算是复杂的条件查询也可以使用Wrapper构造完成。xml不再是唯一选择。</p><h1 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h1><p>首先添加依赖<a href="https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter">MyBatis Plus</a></p><p>因为要配合数据库使用，所以我们还需要添加数据库连接池依赖<a href="https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter">Druid Spring Boot Starter</a></p><p>如果使用的数据库是mysql，还要添加mysql驱动依赖<a href="https://mvnrepository.com/artifact/com.mysql/mysql-connector-j">MySQL Connector&#x2F;J</a></p><p>接下来配置数据源，推荐将 <code>application.properties</code>文件重命名为 <code>application.yml</code>，这样配置起来会方便些</p><p>在此之前，我们需要建立数据库，这里我们建立的数据库为 <code>demo1</code></p><p>以下是连接池的详细配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">druid:</span></span><br><span class="line">            <span class="comment"># 数据库地址</span></span><br><span class="line">            <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/demo1?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">            <span class="comment"># 数据库用户名</span></span><br><span class="line">            <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">            <span class="comment"># 数据库密码</span></span><br><span class="line">            <span class="attr">password:</span> <span class="string">qweasd</span></span><br><span class="line">            <span class="comment"># 数据库连接池初始值</span></span><br><span class="line">            <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 数据库连接池最大值</span></span><br><span class="line">            <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">            <span class="comment"># 获取连接时最大等待时间，单位毫秒(1分钟)</span></span><br><span class="line">            <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 池中空闲连接大于minIdle且连接空闲时间大于该值，则关闭该连接，单位毫秒(5分钟，默认30分钟)</span></span><br><span class="line">            <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">            <span class="comment"># 数据库连接池最小空闲值</span></span><br><span class="line">            <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">            <span class="comment"># 借用连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">            <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">            <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">            <span class="comment"># 连接空闲时检测，如果连接空闲时间大于timeBetweenEvictionRunsMillis指定的毫秒，执行validationQuery指定的SQL来检测连接是否有效</span></span><br><span class="line">            <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment"># 空闲连接检查、废弃连接清理、空闲连接池大小调整的操作时间间隔，单位是毫秒(1分钟)</span></span><br><span class="line">            <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">            <span class="comment"># 检测连接是否有效时执行的sql命令</span></span><br><span class="line">            <span class="attr">validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line">            <span class="comment"># 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span></span><br><span class="line">            <span class="attr">filters:</span> <span class="string">stat,</span> <span class="string">wall</span></span><br><span class="line">            <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">            <span class="attr">connection-properties:</span> <span class="string">&quot;druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500&quot;</span></span><br><span class="line">            <span class="comment">#是否启用StatFilter默认值false，用于采集 web-jdbc 关联监控的数据。</span></span><br><span class="line">            <span class="attr">web-stat-filter:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="comment">#需要监控的 url</span></span><br><span class="line">                <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">                <span class="comment">#排除一些静态资源，以提高效率</span></span><br><span class="line">                <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span></span><br><span class="line">            <span class="comment">#是否启用StatViewServlet（监控页面）默认值为false（考虑到安全问题默认并未启动，如需启用建议设置密码或白名单以保障安全）, 不设置白名单默认只允许localhost访问</span></span><br><span class="line">            <span class="attr">stat-view-servlet:</span></span><br><span class="line">                <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">                <span class="comment">#内置的监控页面地址，例如 /druid/*，则内置监控页面的首页是 /druid/index.html</span></span><br><span class="line">                <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">                <span class="comment">#是否允许清空统计数据</span></span><br><span class="line">                <span class="attr">reset-enable:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">                <span class="attr">login-password:</span> <span class="string">qweasd</span></span><br></pre></td></tr></table></figure><p>接下来我们需要创建用户表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `d_user`  (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;用户主键&#x27;</span>,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">3</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_general_ci COMMENT <span class="operator">=</span> <span class="string">&#x27;用户表&#x27;</span> ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><p>添加一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `d_user` (`username`, `password`, `nickname`, `email`) <span class="keyword">VALUES</span> (<span class="string">&#x27;zzyi&#x27;</span>, <span class="string">&#x27;qweasd&#x27;</span>, <span class="string">&#x27;zzyi&#x27;</span>, <span class="string">&#x27;zzyi@unknow.com&#x27;</span>)</span><br></pre></td></tr></table></figure><p>同时我们需要在项目里建立对应的实体类</p><p>新建包 <code>entity</code>，在里面建立类 <code>DUser</code>,</p><p>如果不想手写get,set,可以引入依赖<a href="https://mvnrepository.com/artifact/org.projectlombok/lombok">Project Lombok</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.media.Schema;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Schema(name = &quot;用户表&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">5555491908432000177L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Schema(description =&quot;用户名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Schema(description =&quot;密码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;用户昵称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;创建时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp createTime;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;修改时间&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp updateTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-实现基本的登录功能"><a href="#3-实现基本的登录功能" class="headerlink" title="3. 实现基本的登录功能"></a>3. 实现基本的登录功能</h1><p>首先设想一下这样一个简单的功能，输入用户名和密码，返回用户全部信息</p><p>接下来讲解如何使用传统的三层架构Controller、Service、Mapper时间这一功能</p><blockquote><p>Mapper层：此层与数据库进行直接交互</p></blockquote><p>我们在 <code>mapper</code>包里面建立一个新的<strong>接口</strong> <code>DUserMapper</code></p><p>内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.DUser;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DUserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;DUser&gt; &#123;</span><br><span class="line">    <span class="comment">// 因为使用了MyBatis-Plus的原因我们只需要继承BaseMapper即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Service层：此层为核心业务层，业务主要逻辑在此实现</p></blockquote><p>我们在 <code>service</code>包下建立的一个新的<strong>接口</strong> <code>LoginService</code></p><p>内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo.entity.DUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line">    DUser <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 <code>service.impl</code>包下建立一个新的<strong>类</strong> <code>LoginServiceImpl</code></p><p>内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.DUser;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.mapper.DUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LoginService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DUserMapper dUserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DUser <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成条件查询构造器</span></span><br><span class="line">        QueryWrapper&lt;DUser&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 条件等价于SQL语句&quot;WHERE username = #&#123;username&#125;&quot;</span></span><br><span class="line">        wrapper.lambda().eq(DUser::getUsername, username);</span><br><span class="line">        <span class="comment">// 将查询到的第一条结果返回</span></span><br><span class="line">        <span class="type">DUser</span> <span class="variable">dUser</span> <span class="operator">=</span> dUserMapper.selectOne(wrapper);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">if</span> (Objects.equals(dUser.getPassword(), password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> dUser;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Controller层：控制器层，将接收的参数简单处理，判断那些请求接受，哪些拒绝</p></blockquote><p>在 <code>controller</code>包下建立新的类 <code>LoginController</code></p><p>内容如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.demo.entity.DUser;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.service.LoginService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Tag(name= &quot;登录控制器&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(description = &quot;登录&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DUser <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> loginService.login(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-调试接口"><a href="#4-调试接口" class="headerlink" title="4. 调试接口"></a>4. 调试接口</h1><p>启动项目，访问<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a>尝试一下吧</p><p>如果遇到不懂的地方可以下载源码进行学习<a href="https://github.com/uniminio/spring-demo">spring-demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 打工人的自我修养 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打工人的自我修养-后端-02——接口测试框架</title>
      <link href="/hexoblog/2022/08/23/efc3e8c826a3/"/>
      <url>/hexoblog/2022/08/23/efc3e8c826a3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Readme"><a href="#1-Readme" class="headerlink" title="1. Readme"></a>1. Readme</h1><p>没想到吧，这个系列竟然还有第二期。</p><p>经过上一篇文章的学习，我相信你对Web服务相关的一些知识有了一定的了解。所谓服务，那便是，你请求资源，我不一定给你资源。坏了，出bug了，那么，究竟是怎么绘世呢？可能是逻辑错误，可能是请求有误等。怎么处理某一个接口的异常，拿浏览器访问肯定是不现实的，更何况在通常情况下，你在浏览器上输入地址也只是一个Get请求，无法发送其他请求。</p><p>那么一个接口测试框架就很有必要了，接下来，我将讲述如何在项目中导入一个全自动的接口测试框架。</p><h1 id="2-Swagger"><a href="#2-Swagger" class="headerlink" title="2. Swagger"></a>2. <a href="https://swagger.io/">Swagger</a></h1><p>要说如今最流行的API规范，当属OpenAPI，几乎所有的API测试程序都支持这项规范，这也就意味着，你设计的API可以很方便的导入到各类软件当中，比如PostMan，Apifox。</p><p>对于如此方便的工具，自然已经有了现成的工具包供我们使用。我们只需要导入此依赖<a href="https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-ui">Springdoc OpenAPI UI</a></p><p>再编写配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> org.springdoc.core.GroupedOpenApi;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringDocConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">openAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;Demo API&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;SpringDoc API 演示&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1.0.0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> GroupedOpenApi <span class="title function_">publicApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GroupedOpenApi.builder()</span><br><span class="line">                .group(<span class="string">&quot;public&quot;</span>)</span><br><span class="line">                .pathsToMatch(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问地址<a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a>即可查看所有的接口。</p><h1 id="3-UI美化"><a href="#3-UI美化" class="headerlink" title="3. UI美化"></a>3. UI美化</h1><p>如果在使用时，觉得这个界面不太行，可以引入一个新的依赖<a href="https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-springdoc-ui">Knife4j Springdoc UI</a></p><p>访问地址<a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a>，基本的接口测试够用了。</p><h1 id="4-接口注释"><a href="#4-接口注释" class="headerlink" title="4. 接口注释"></a>4. 接口注释</h1><p>这仅仅只是一个API测试框架，每个接口，每个参数有啥作用，都需要我们自己编写注释。</p><p>还是以最开始的接口为例，做如下修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.Operation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.annotations.tags.Tag;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加上这个注解才能处理http请求</span></span><br><span class="line"><span class="meta">@Tag(name = &quot;Hello控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// 配置url映射，当访问serverAddress/hello时返回以下数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;Hello Spring Boot&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在页面显示Api注释了。</p><p>常用注解说明：</p><table><thead><tr><th>swagger2</th><th>OpenAPI 3</th><th>注解位置</th></tr></thead><tbody><tr><td>@Api</td><td>@Tag(name &#x3D; “接口类描述”)</td><td>Controller 类上</td></tr><tr><td>@ApiOperation</td><td>@Operation(summary &#x3D;“接口方法描述”)</td><td>Controller 方法上</td></tr><tr><td>@ApiImplicitParams</td><td>@Parameters</td><td>Controller 方法上</td></tr><tr><td>@ApiImplicitParam</td><td>@Parameter(description&#x3D;“参数描述”)</td><td>Controller 方法上 @Parameters里</td></tr><tr><td>@ApiParam</td><td>@Parameter(description&#x3D;“参数描述”)</td><td>Controller 方法的参数上</td></tr><tr><td>@ApiIgnore</td><td>@Parameter(hidden &#x3D; true) 或 @Operation(hidden &#x3D; true) 或 @Hidden</td><td>-</td></tr><tr><td>@ApiModel</td><td>@Schema</td><td>DTO类上</td></tr><tr><td>@ApiModelProperty</td><td>@Schema</td><td>DTO属性上</td></tr></tbody></table><p>更多资料参阅：<a href="https://springdoc.org/">SpringDoc官方文档</a>，<a href="https://segmentfault.com/a/1190000041002554">Spring Boot 集成 SpringDoc Swagger 3</a></p>]]></content>
      
      
      <categories>
          
          <category> 打工人的自我修养 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打工人的自我修养(后端)01——Hello World Spring Boot</title>
      <link href="/hexoblog/2022/08/10/c2af516864cc/"/>
      <url>/hexoblog/2022/08/10/c2af516864cc/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Readme"><a href="#一、Readme" class="headerlink" title="一、Readme"></a>一、Readme</h1><p>如果想要开始学习后端的知识，那我有以下网站推荐</p><p>网站寄了，那没事了，还是看一看这篇文章吧。</p><p>如果你能从这篇文章获得对Java开发的兴趣，那便是对我的最大支持。</p><p>另，本篇文章不会对编程基础进行讲解，如果理解有困难的话，建议直接与我交流。</p><p>没有联系方式，只能说联系得到我的人都联系得到我。</p><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><p>软件准备：</p><ul><li><p>IDE: 当然还是首推<a href="https://www.jetbrains.com/zh-cn/idea/">IntelliJ IDEA：JetBrains 功能强大、符合人体工程学的 Java IDE</a>，对于本篇教程而言，Community版本已完全足够使用，如果想要使用Ultimate版本，请参考以下<a href="https://3.jetbra.in/">破解教程</a></p></li><li><p>JDK: 对于如今的程序员，Java8已不再是主流的JDK，建议使用Java11或者Java17，这两个版本是LTS(长期维护)版本，请于此下载适合的版本<a href="https://jdk.java.net/archive/">Archived OpenJDK GA Releases</a></p></li></ul><p>环境准备：</p><ol><li><p>解压缩JDK，添加里面的<code>bin</code>目录到系统环境变量<br>运行以下命令,如果出现版本信息则配置正确</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li><p>IDE安装到任意目录，如果在安装过程中没有勾选生成桌面快捷方式，可以到开始菜单寻找软件图标</p></li></ol><h1 id="三、Hello-World-Spring-Boot"><a href="#三、Hello-World-Spring-Boot" class="headerlink" title="三、Hello World Spring Boot"></a>三、Hello World Spring Boot</h1><h2 id="1-何谓Spring-Boot"><a href="#1-何谓Spring-Boot" class="headerlink" title="1. 何谓Spring Boot"></a>1. 何谓Spring Boot</h2><blockquote><p>Spring Boot 是 Pivotal 团队在 Spring 的基础上提供的一套全新的开源框架，其目的是为了简化 Spring 应用的搭建和开发过程。Spring Boot 去除了大量的 XML 配置文件，简化了复杂的依赖管理。</p><p>Spring Boot 具有 Spring 一切优秀特性，Spring 能做的事，Spring Boot 都可以做，而且使用更加简单，功能更加丰富，性能更加稳定而健壮。随着近些年来微服务技术的流行，Spring Boot 也成了时下炙手可热的技术。</p><p>Spring Boot 集成了大量常用的第三方库配置，Spring Boot 应用中这些第三方库几乎可以是零配置的开箱即用（out-of-the-box），大部分的 Spring Boot 应用都只需要非常少量的配置代码（基于 Java 的配置），开发者能够更加专注于业务逻辑。</p></blockquote><p><del>太长不看</del></p><h2 id="2-Spring-Initializr"><a href="#2-Spring-Initializr" class="headerlink" title="2. Spring Initializr"></a>2. Spring Initializr</h2><p>如果你的IDE是Ultimate版本，则可以在新建项目栏直接选择这一项，对于Community版本则需要使用这个网站完成项目初始化<a href="https://start.spring.io/">Spring Initializr</a></p><p>变更Group ID 与 Artifact ID 为你想要的名称</p><p>注意选择Java版本点击Generate按钮即可完成项目生成</p><p>将下载的压缩包解压到任意目录，使用IDEA打开</p><h2 id="3-配置Maven"><a href="#3-配置Maven" class="headerlink" title="3. 配置Maven"></a>3. 配置Maven</h2><p>对于初次运行的项目，Maven会从中央仓库下载依赖，但中央仓库的地址不在国内，下载速度不能说是慢如蜗牛，只能说是纹丝不动。</p><p>那么这里有两个解决方案:</p><ol><li><p>配置镜像仓库地址，这里首推<a href="https://developer.aliyun.com/mvn/guide">aliyun仓库服务</a>。<br>默认的<code>settings.xml</code>可以在<code>IDEA path\plugins\maven\lib\maven3\conf</code>目录下找到，按照教程更改配置内容，这里建议搜索关键字<code>localRepository</code>更改依赖的默认存储位置，比如我的是<code>&lt;localRepository&gt;D:\maven\repository&lt;/localRepository&gt;</code><br>，更改配置后需要将配置文件移到<code>C:\Users\%username%\.m2</code>才能生效，或者更改IDEA的Setting，搜索Maven，勾选Overwrite，选定刚才的文件。</p></li><li><p>配置代理服务器（</p></li></ol><p>配置完成后还有一个东西下载非常慢，那便是因为<code>.mvn/wrapper/maven-wrapper.properties</code>将Maven下载Url写死了，这里可以直接删除这个文件夹，然后更改IDEA的Setting，搜索Maven，取消勾选最下面的一个选项即可，这样修改会使用IDEA内置的Maven，可能不是最新版本。影响不大，不用特别在意（想想现在Java都出18了，还有人用Java8）</p><h2 id="4-编写你的第一个接口"><a href="#4-编写你的第一个接口" class="headerlink" title="4. 编写你的第一个接口"></a>4. 编写你的第一个接口</h2><p>运行这个项目的main函数，程序正常退出，代表一切正常。</p><p>如果我们想要编写一个Web API，那么需要添加一个依赖<code>spring-boot-starter-web</code>，使用如下网站<a href="https://mvnrepository.com/">MVN Repository</a>使用如上关键字进行搜索，选择最新版本，复制Maven Dependency粘贴到<code>pom.xml</code>文件下<code>dependencies</code>节点下，此依赖作为<code>spring-boot-starter-parent</code>的子项目，在使用时建议删除版本号，Maven会自动下载合适的版本。</p><p>粘贴完成后点击右上角M图标加载依赖，再次启动main函数发现程序会一直运行，则配置正确，如果程序直接退出，检查8080端口是否已被占用，如果被占用，编辑<code>application.properties</code>文件，添加配置<code>server.port=xxxx</code>进行服务器端口的修改。</p><p>在main函数所在的类所在的包下新建Java Class，输入<code>controller.HelloController</code>，IDE会自动创建包<code>controller</code>，然后自动创建Java Class<code>HelloController</code>，然后编辑以下内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加上这个注解才能处理http请求</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// 配置url映射，当访问serverAddress/hello时返回以下数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World Spring Boot&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动main函数，使用浏览器访问<a href="http://127.0.0.1:8080/hello">http://127.0.0.1:8080/hello</a>，页面输出<code>Hello World Spring Boot</code>。</p><p>恭喜天赋异禀的你，第一个Web API至此建立完成。</p><img src="/hexoblog/2022/08/10/c2af516864cc/2022-08-11-11-15-13-c62fb05b787210bc66137effe67efa5.jpg" class="">]]></content>
      
      
      <categories>
          
          <category> 打工人的自我修养 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透工具frp的简单使用</title>
      <link href="/hexoblog/2022/06/26/eb22c48e2dd8/"/>
      <url>/hexoblog/2022/06/26/eb22c48e2dd8/</url>
      
        <content type="html"><![CDATA[<h2 id="1-frp-是什么？"><a href="#1-frp-是什么？" class="headerlink" title="1. frp 是什么？"></a>1. frp 是什么？</h2><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。</p><p>简单来说就是如果你有一台具有公网IP的主机，那么可以通过frp使你本机的端口暴露至公网供其他人访问。</p><h2 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h2><p>推荐在官方Github的<a href="https://github.com/fatedier/frp/releases">Release</a>页面下载最新的版本。</p><p>如果下载速度较慢可以尝试使用我提供的网盘链接进行下载(版本不一定是最新的):<a href="https://uniminio.lanzouj.com/b0elyzyod">蓝奏云</a> 密码:hpq5</p><p>关于下载的文件:</p><ul><li>linux用户推荐下载:<code>frp_version_linux_amd64.tar.gz</code></li><li>windows用户推荐下载:<code>frp_version_windows_amd64.zip</code></li></ul><h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><p>解压缩下载的压缩包，将其中的 frpc 拷贝到内网服务所在的机器上，将 frps 拷贝到具有公网 IP 的机器上，放置在任意目录。</p><h2 id="4-开始使用"><a href="#4-开始使用" class="headerlink" title="4. 开始使用"></a>4. 开始使用</h2><h3 id="4-1-配置文件简单介绍"><a href="#4-1-配置文件简单介绍" class="headerlink" title="4.1 配置文件简单介绍"></a>4.1 配置文件简单介绍</h3><p>frps.ini(服务端用配置文件)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务端绑定的端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 密码，这一项服务端配置与客户端配置一样才能正常使用</span></span><br><span class="line"><span class="attr">token</span> = xxxxxxx</span><br></pre></td></tr></table></figure><p>frpc.ini(客户端用配置文件)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 填写部署frps的服务器ip地址</span></span><br><span class="line"><span class="attr">server_addr</span> = xxx.xxx.xxx.xxx</span><br><span class="line"><span class="comment"># 与上面 bind_port 对应</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 与上面 token 对应</span></span><br><span class="line"><span class="attr">token</span> = xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称, 随意填写</span></span><br><span class="line"><span class="section">[example_server]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment"># 本地服务开放的端口</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">4000</span></span><br><span class="line"><span class="comment"># 服务端开放的端口</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7001</span></span><br></pre></td></tr></table></figure><p>在以上配置文件下，访问公网地址xxx.xxx.xxx.xxx:7001 相当于在本机访问 127.0.0.1:4000</p><h3 id="4-2-服务启动"><a href="#4-2-服务启动" class="headerlink" title="4.2 服务启动"></a>4.2 服务启动</h3><p>服务端启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/frp</span><br><span class="line">./frps -c ./frps.ini</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./frps -c ./frps.ini &amp;</span></span><br></pre></td></tr></table></figure><p>客户端启动:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /path/to/frp</span><br><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>更多资料请参阅:<a href="https://gofrp.org/docs/">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> frp </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conan基于Visual Studio的创建及上传包</title>
      <link href="/hexoblog/2021/10/18/33f24944f4da/"/>
      <url>/hexoblog/2021/10/18/33f24944f4da/</url>
      
        <content type="html"><![CDATA[<h2 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1. 新建项目"></a>1. 新建项目</h2><p>建立一个新的项目，可以选择<code>lib</code>项目，也可以选择<code>dll</code>项目，但不要选择<code>exe</code>项目。<del>相信我不用多解释</del></p><h2 id="2-生成conanfile-py"><a href="#2-生成conanfile-py" class="headerlink" title="2. 生成conanfile.py"></a>2. 生成conanfile.py</h2><p>在解决方案路径中使用<code>cmd</code>输入以下命令:    </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:</span></span><br><span class="line"><span class="comment"># conan new [包名称]/[包版本]</span></span><br><span class="line">conan new conan-upload-pkg/1.0.0</span><br></pre></td></tr></table></figure><p>此时目录下会生成一个文件<code>conanfile.py</code>  </p><p>文件内容如下:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> conans <span class="keyword">import</span> ConanFile, CMake, tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConanUploadPkgConan</span>(<span class="title class_ inherited__">ConanFile</span>):</span><br><span class="line">    name = <span class="string">&quot;conan-upload-pkg&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">    license = <span class="string">&quot;&lt;Put the package license here&gt;&quot;</span></span><br><span class="line">    author = <span class="string">&quot;&lt;Put your name here&gt; &lt;And your email here&gt;&quot;</span></span><br><span class="line">    url = <span class="string">&quot;&lt;Package recipe repository url here, for issues about the package&gt;&quot;</span></span><br><span class="line">    description = <span class="string">&quot;&lt;Description of ConanUploadPkg here&gt;&quot;</span></span><br><span class="line">    topics = (<span class="string">&quot;&lt;Put some tag here&gt;&quot;</span>, <span class="string">&quot;&lt;here&gt;&quot;</span>, <span class="string">&quot;&lt;and here&gt;&quot;</span>)</span><br><span class="line">    settings = <span class="string">&quot;os&quot;</span>, <span class="string">&quot;compiler&quot;</span>, <span class="string">&quot;build_type&quot;</span>, <span class="string">&quot;arch&quot;</span></span><br><span class="line">    options = &#123;<span class="string">&quot;shared&quot;</span>: [<span class="literal">True</span>, <span class="literal">False</span>], <span class="string">&quot;fPIC&quot;</span>: [<span class="literal">True</span>, <span class="literal">False</span>]&#125;</span><br><span class="line">    default_options = &#123;<span class="string">&quot;shared&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;fPIC&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    generators = <span class="string">&quot;cmake&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">config_options</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.settings.os == <span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">            <span class="keyword">del</span> self.options.fPIC</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">source</span>(<span class="params">self</span>):</span><br><span class="line">        self.run(<span class="string">&quot;git clone https://github.com/conan-io/hello.git&quot;</span>)</span><br><span class="line">        <span class="comment"># This small hack might be useful to guarantee proper /MT /MD linkage</span></span><br><span class="line">        <span class="comment"># in MSVC if the packaged project doesn&#x27;t have variables to set it</span></span><br><span class="line">        <span class="comment"># properly</span></span><br><span class="line">        tools.replace_in_file(<span class="string">&quot;hello/CMakeLists.txt&quot;</span>, <span class="string">&quot;PROJECT(HelloWorld)&quot;</span>,</span><br><span class="line">                              <span class="string">&#x27;&#x27;&#x27;PROJECT(HelloWorld)</span></span><br><span class="line"><span class="string">include($&#123;CMAKE_BINARY_DIR&#125;/conanbuildinfo.cmake)</span></span><br><span class="line"><span class="string">conan_basic_setup()&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self</span>):</span><br><span class="line">        cmake = CMake(self)</span><br><span class="line">        cmake.configure(source_folder=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        cmake.build()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Explicit way:</span></span><br><span class="line">        <span class="comment"># self.run(&#x27;cmake %s/hello %s&#x27;</span></span><br><span class="line">        <span class="comment">#          % (self.source_folder, cmake.command_line))</span></span><br><span class="line">        <span class="comment"># self.run(&quot;cmake --build . %s&quot; % cmake.build_config)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">package</span>(<span class="params">self</span>):</span><br><span class="line">        self.copy(<span class="string">&quot;*.h&quot;</span>, dst=<span class="string">&quot;include&quot;</span>, src=<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*hello.lib&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.dll&quot;</span>, dst=<span class="string">&quot;bin&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.so&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.dylib&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.a&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">package_info</span>(<span class="params">self</span>):</span><br><span class="line">        self.cpp_info.libs = [<span class="string">&quot;hello&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-修改conanfile-py"><a href="#3-修改conanfile-py" class="headerlink" title="3. 修改conanfile.py"></a>3. 修改conanfile.py</h2><p>这里建议使用<code>VSCode</code>进行编辑，装上Python插件之后就有代码提示的功能。<del>当然理论上记事本写代码也是可以的</del>  </p><p>修改后文件内容如下:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里我们不使用CMake,而是使用MSBuild</span></span><br><span class="line"><span class="comment"># from conans import ConanFile, CMake, tools</span></span><br><span class="line"><span class="keyword">from</span> conans <span class="keyword">import</span> ConanFile, MSBuild, tools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConanUploadPkgConan</span>(<span class="title class_ inherited__">ConanFile</span>):</span><br><span class="line">    <span class="comment"># 包名：建议使用小写字母加短横线的方式命名，也推荐使用缩写，如以下名称可以缩写成&quot;cupkg&quot;</span></span><br><span class="line">    name = <span class="string">&quot;conan-upload-pkg&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 许可证：相当于授权证书，就是是否允许商用之类的，相关许可证差异请自行搜索</span></span><br><span class="line">    license = <span class="string">&quot;MIT&quot;</span></span><br><span class="line">    author = <span class="string">&quot;zzyi&quot;</span></span><br><span class="line">    url = <span class="string">&quot;&quot;</span></span><br><span class="line">    description = <span class="string">&quot;教你如何上传一个conan包&quot;</span></span><br><span class="line">    topics = ()</span><br><span class="line">    settings = <span class="string">&quot;os&quot;</span>, <span class="string">&quot;compiler&quot;</span>, <span class="string">&quot;build_type&quot;</span>, <span class="string">&quot;arch&quot;</span></span><br><span class="line">    options = &#123;<span class="string">&quot;shared&quot;</span>: [<span class="literal">True</span>, <span class="literal">False</span>], <span class="string">&quot;fPIC&quot;</span>: [<span class="literal">True</span>, <span class="literal">False</span>]&#125;</span><br><span class="line">    default_options = &#123;<span class="string">&quot;shared&quot;</span>: <span class="literal">False</span>, <span class="string">&quot;fPIC&quot;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">    generators = <span class="string">&quot;cmake&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 本地导出代码,大伙应该都看得懂啥意思</span></span><br><span class="line">    exports_sources = <span class="string">&quot;*.h&quot;</span>, <span class="string">&quot;*.cpp&quot;</span>, <span class="string">&quot;*.sln&quot;</span>, <span class="string">&quot;*.vcxproj&quot;</span>, <span class="string">&quot;*.filters&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">config_options</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.settings.os == <span class="string">&quot;Windows&quot;</span>:</span><br><span class="line">            <span class="keyword">del</span> self.options.fPIC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处表示代码来源，如果不使用远程git的话，直接从本地导出即可</span></span><br><span class="line"><span class="comment">#     def source(self):</span></span><br><span class="line"><span class="comment">#         self.run(&quot;git clone https://github.com/conan-io/hello.git&quot;)</span></span><br><span class="line"><span class="comment">#         # This small hack might be useful to guarantee proper /MT /MD linkage</span></span><br><span class="line"><span class="comment">#         # in MSVC if the packaged project doesn&#x27;t have variables to set it</span></span><br><span class="line"><span class="comment">#         # properly</span></span><br><span class="line"><span class="comment">#         tools.replace_in_file(&quot;hello/CMakeLists.txt&quot;, &quot;PROJECT(HelloWorld)&quot;,</span></span><br><span class="line"><span class="comment">#                               &#x27;&#x27;&#x27;PROJECT(HelloWorld)</span></span><br><span class="line"><span class="comment"># include($&#123;CMAKE_BINARY_DIR&#125;/conanbuildinfo.cmake)</span></span><br><span class="line"><span class="comment"># conan_basic_setup()&#x27;&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重写build方法</span></span><br><span class="line">    <span class="comment"># def build(self):</span></span><br><span class="line">    <span class="comment">#     cmake = CMake(self)</span></span><br><span class="line">    <span class="comment">#     cmake.configure(source_folder=&quot;hello&quot;)</span></span><br><span class="line">    <span class="comment">#     cmake.build()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self</span>):</span><br><span class="line">        ms = MSBuild(self)</span><br><span class="line">        <span class="comment"># 使用MSBuild构建我们的工程</span></span><br><span class="line">        ms.build(<span class="string">&quot;ConanUplodPkg.sln&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Explicit way:</span></span><br><span class="line">        <span class="comment"># self.run(&#x27;cmake %s/hello %s&#x27;</span></span><br><span class="line">        <span class="comment">#          % (self.source_folder, cmake.command_line))</span></span><br><span class="line">        <span class="comment"># self.run(&quot;cmake --build . %s&quot; % cmake.build_config)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">package</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># copy头文件 dest文件夹代表目标文件夹，如果你不想你的头文件与系统头文件混在一起的话，建议加子目录</span></span><br><span class="line">        <span class="comment"># self.copy(&quot;*.h&quot;, dst=&quot;include&quot;, src=&quot;hello&quot;)</span></span><br><span class="line">        self.copy(<span class="string">&quot;*.h&quot;</span>, dst = <span class="string">&quot;include/cupkg&quot;</span>, src = <span class="string">&quot;ConanUplodPkg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记得改</span></span><br><span class="line">        <span class="comment"># self.copy(&quot;*hello.lib&quot;, dst=&quot;lib&quot;, keep_path=False)</span></span><br><span class="line">        self.copy(<span class="string">&quot;*.lib&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        self.copy(<span class="string">&quot;*.dll&quot;</span>, dst=<span class="string">&quot;bin&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.so&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.dylib&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line">        self.copy(<span class="string">&quot;*.a&quot;</span>, dst=<span class="string">&quot;lib&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 这里加一行pdb文件，方便开发人员使用包的时候进行调试</span></span><br><span class="line">        self.copy(<span class="string">&quot;*.pdb&quot;</span>, dst=<span class="string">&quot;bin&quot;</span>, keep_path=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">package_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 记得改，不改用不了</span></span><br><span class="line">        <span class="comment"># self.cpp_info.libs = [&quot;hello&quot;]</span></span><br><span class="line">        self.cpp_info.libs = [<span class="string">&quot;ConanUplodPkg&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-愉快的建立函数或者是类吧"><a href="#4-愉快的建立函数或者是类吧" class="headerlink" title="4. 愉快的建立函数或者是类吧"></a>4. 愉快的建立函数或者是类吧</h2><p><del>这部分不需要我来说吧</del>  </p><h2 id="5-测试程序"><a href="#5-测试程序" class="headerlink" title="5. 测试程序"></a>5. 测试程序</h2><p>一个<code>lib</code>或者<code>dll</code>必须经过测试才能上传，这里示范一下简单的测试流程。  </p><p>在此解决方案下新建一个控制台项目命名为<code>ConanUplodPkgTest</code>(建立符合当前测试环境的项目即可，不一定非得是控制台)  </p><p>在<code>ConanUplodPkgTest</code>项目上右键<code>添加</code>-&gt;<code>引用</code>，把<code>ConanUplodPkg</code>前的方框勾选上。  </p><p>编写测试代码  </p><p><del>这部分我也没啥可以说的，确保程序能跑通即可</del>  </p><p>另外包含头文件要么加上项目路径，要么直接用相对路径，看个人喜好。  </p><h2 id="6-导出包"><a href="#6-导出包" class="headerlink" title="6. 导出包"></a>6. 导出包</h2><p>在导出包之前，我们先要处理好测试程序，让其不要生成  </p><p>在解决方案上右键选择<code>属性</code>-&gt;<code>配置属性</code>-&gt;<code>配置</code>，上方选择<code>所有配置</code>、<code>所有平台</code>，然后取消所有测试程序的生成  </p><p><strong>然后重要的一点，在菜单栏选中<code>视图</code>-&gt;<code>其他窗口</code>-&gt;<code>属性管理器</code>，查看所有配置，如果存在<code>conanbuildinfo</code>，请将其移除</strong>  </p><p>此项代表的是该项目依赖的其他conan包，但由于配置差异，无法在上传后解析，请务必删除。  </p><p><strong>务必记得点击<code>全部保存</code></strong>  </p><p>导出包请在<code>conanfile.py</code>所在目录下使用如下命令:  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">conan <span class="built_in">export</span> .</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line">conan <span class="built_in">export</span> . @hzz/testing</span><br><span class="line"><span class="comment"># hzz为作者，testing为channel，表示测试的意思，再比如stable表示稳定版的意思</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此命令将导出源码至本地，可在本地调用，使用以下命令可以查询本地的包</span></span><br><span class="line">conan search *</span><br></pre></td></tr></table></figure><h2 id="7-上传包"><a href="#7-上传包" class="headerlink" title="7. 上传包"></a>7. 上传包</h2><p>上传包首先得有一个conan服务器，这部分不在祥述，网上教程很全面。  </p><p>上传使用如下命令  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法:</span></span><br><span class="line"><span class="comment"># conan upload &lt;RECIPE&gt; -r &lt;REMOTE&gt; --all</span></span><br><span class="line"><span class="comment"># &lt;RECIPE&gt; is the Conan recipe reference you want to upload in the format:</span></span><br><span class="line"><span class="comment"># &lt;NAME&gt;/&lt;VERSION&gt;@&lt;USER&gt;/&lt;CHANNEL&gt;</span></span><br><span class="line"><span class="comment"># For example: lib/1.0@conan/stable</span></span><br><span class="line"><span class="comment"># &lt;REMOTE&gt;为远程服务器名称</span></span><br><span class="line"><span class="comment"># --all上传已编译好的二进制文件，别人下载后无需二次编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如我要上传我的这个包</span></span><br><span class="line">conan upload conan-upload-pkg/1.0.0 -r my-remote</span><br></pre></td></tr></table></figure><h2 id="8-结束"><a href="#8-结束" class="headerlink" title="8. 结束"></a>8. 结束</h2><p>关于上传的部分描述到此结束，有关conan包的调用参考我的另一篇文章</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> conan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conan </tag>
            
            <tag> visual studio </tag>
            
            <tag> c++ </tag>
            
            <tag> 包管理 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Conan基于Visual Studio的使用</title>
      <link href="/hexoblog/2021/10/18/ff8af3cb5f3b/"/>
      <url>/hexoblog/2021/10/18/ff8af3cb5f3b/</url>
      
        <content type="html"><![CDATA[<h2 id="一、坏境搭建"><a href="#一、坏境搭建" class="headerlink" title="一、坏境搭建"></a>一、坏境搭建</h2><h3 id="1-下载软件"><a href="#1-下载软件" class="headerlink" title="1. 下载软件"></a>1. 下载软件</h3><ul><li><p>python-3.8.10-amd64. 下载地址:<a href="https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe">https://www.python.org/ftp/python/3.8.10/python-3.8.10-amd64.exe</a> ，尽量使用python3，最新版也是可以的。  </p></li><li><p>Conan Extension for Visual Studio. 下载地址: <a href="https://marketplace.visualstudio.com/items?itemName=conan-io.conan-vs-extension">https://marketplace.visualstudio.com/items?itemName=conan-io.conan-vs-extension</a>  </p></li><li><p>如果遇到下载速度缓慢，可以尝试从以下地址进行下载:  </p><p>  <a href="https://uniminio.lanzoui.com/b0eks0obi">https://uniminio.lanzoui.com/b0eks0obi</a><br>  密码:hh2q</p></li></ul><h3 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2. 安装软件"></a>2. 安装软件</h3><ol><li><p>python-3.8.10安装时请勾选Add Python 3.8 to PATH，其他选项随意  </p></li><li><p>Conan Extension for Visual Studio直接双击双击安装即可  </p></li><li><p>在安装完成后请使用cmd允许以下命令:  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">pip install conan</span><br></pre></td></tr></table></figure></li><li><p>变更<code>C:\Users\Administrator\.conan\conan.conf</code>文件部分字段如下，作用为变更下载的package的路径:  </p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[storage]</span></span><br><span class="line"><span class="comment"># This is the default path, but you can write your own. It must be an absolute path or a</span></span><br><span class="line"><span class="comment"># path beginning with &quot;~&quot; (if the environment var CONAN_USER_HOME is specified, this directory, even</span></span><br><span class="line"><span class="comment"># with &quot;~/&quot;, will be relative to the conan user home, not to the system user home)</span></span><br><span class="line"><span class="comment"># path = ./data</span></span><br><span class="line"><span class="attr">path</span> = D:\conan\data</span><br></pre></td></tr></table></figure></li><li><p>(可选操作)建立<code>C:\Users\Administrator\.conan\profiles\default</code>文件，注意没有后缀，输入如下内容:  </p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[settings]</span></span><br><span class="line"><span class="attr">os</span>=Windows</span><br><span class="line"><span class="attr">os_build</span>=Windows</span><br><span class="line"><span class="attr">arch</span>=x86</span><br><span class="line"><span class="attr">arch_build</span>=x86</span><br><span class="line"><span class="attr">compiler</span>=Visual Studio</span><br><span class="line"><span class="attr">compiler.version</span>=<span class="number">15</span></span><br><span class="line"><span class="attr">build_type</span>=Debug</span><br><span class="line"><span class="section">[options]</span></span><br><span class="line"><span class="section">[build_requires]</span></span><br><span class="line"><span class="section">[env]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>以上即为环境搭建的全部步骤。  </p><h2 id="二、使用Conan包"><a href="#二、使用Conan包" class="headerlink" title="二、使用Conan包"></a>二、使用Conan包</h2><p>以无敌的OpenCV为例</p><ol><li><p>建立一个控制台项目</p></li><li><p>注意编译平台需要选择x64版本，这样可以直接下载二进制文件，如果选择x86版本，则需要自行编译，时间非常长。</p></li><li><p>使用如下命令搜索最新的OpenCV包  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">conan search opencv* -r conan-center</span><br><span class="line"></span><br><span class="line"><span class="comment">#output</span></span><br><span class="line">Existing package recipes:</span><br><span class="line"></span><br><span class="line">opencv/2.4.13.5@conan/stable</span><br><span class="line">opencv/2.4.13.7</span><br><span class="line">opencv/3.4.3@conan/stable</span><br><span class="line">opencv/3.4.5@conan/stable</span><br><span class="line">opencv/3.4.12</span><br><span class="line">opencv/4.0.0@conan/stable</span><br><span class="line">opencv/4.0.1@conan/stable</span><br><span class="line">opencv/4.1.0@conan/stable</span><br><span class="line">opencv/4.1.1@conan/stable</span><br><span class="line">opencv/4.1.2</span><br><span class="line">opencv/4.2.0@conan/stable</span><br><span class="line">opencv/4.3.0@conan/stable</span><br><span class="line">opencv/4.5.0</span><br><span class="line">opencv/4.5.1</span><br><span class="line">opencv/4.5.2</span><br></pre></td></tr></table></figure></li><li><p>在项目源码目录建立新文件<code>conanfile.txt</code>输入以下内容:  </p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[requires]</span></span><br><span class="line"><span class="comment"># 输入你喜欢的任意版本</span></span><br><span class="line">opencv/4.5.2</span><br></pre></td></tr></table></figure></li><li><p>在<code>解决方案资源管理器</code>中鼠标移到<code>当前项目</code>上然后右键选择第一项<code>Install(Current Project)</code>  </p></li><li><p>等待安装完成，在<code>cpp</code>中写下如下测试代码</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;opencv2/opencv.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    Mat img = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Public\\Pictures\\Sample Pictures\\Koala.jpg&quot;</span>);</span><br><span class="line">    <span class="built_in">imshow</span>(<span class="string">&quot;Koala&quot;</span>, img);</span><br><span class="line">    <span class="built_in">waitKey</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>点击运行看一下成果吧</p></li></ol><h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2><blockquote><p>怎样，是不是比在官网下载OpenCV，然后自行添加头文件，手动链接lib文件，手动复制dll文件要方便呢。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
          <category> conan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> conan </tag>
            
            <tag> visual studio </tag>
            
            <tag> c++ </tag>
            
            <tag> 包管理 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客起源</title>
      <link href="/hexoblog/2021/10/18/533a3b757ff5/"/>
      <url>/hexoblog/2021/10/18/533a3b757ff5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果你想建立一个属于自己的博客网站，可以参考这篇文章</p></blockquote><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>两个网站<br><a href="https://hexo.io/zh-cn/">Hexo 快速、简洁且高效的博客框架</a><br><a href="https://butterfly.js.org/">Butterfly 优秀、美观的Hexo主题</a>  </p><blockquote><p><del>好了，你已经学会了建站的全部技巧，快去建立自己的博客网站吧</del>…个鬼啊。   </p></blockquote><h2 id="二、利用Hexo搭建网站"><a href="#二、利用Hexo搭建网站" class="headerlink" title="二、利用Hexo搭建网站"></a>二、利用Hexo搭建网站</h2><p>官方文档说的很清楚，而且是中文，这方面我只做节选。  </p><ol><li><p>安装Node.js<a href="https://nodejs.org/zh-cn/download/">点此下载</a>  </p></li><li><p>下载git<a href="https://git-scm.com/download/win">点此下载</a>  </p></li><li><p>配置Node.js使用淘宝镜像  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>配置Node.js下载路径，路径可自己定义  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\nodejs\node_cache&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\nodejs\node_global&quot;</span></span><br></pre></td></tr></table></figure><p> <code>prefix</code>路径记得添加到环境变量，不然部分命令可能用不了</p></li><li><p>安装Hexo  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>建立网站  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li><p>启动网站  </p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p> 然后访问<a href="http://localhost:4000/">http://localhost:4000/</a>即可</p></li></ol><h2 id="三、利用Butterfly美化博客"><a href="#三、利用Butterfly美化博客" class="headerlink" title="三、利用Butterfly美化博客"></a>三、利用Butterfly美化博客</h2><p>因为配置项太多了建议直接参考<a href="https://butterfly.js.org/">官方文档</a></p><h2 id="四、处理后事"><a href="#四、处理后事" class="headerlink" title="四、处理后事"></a>四、处理后事</h2><blockquote><p> 不要说得那么不吉利啊喂。  </p></blockquote><h3 id="1-部署"><a href="#1-部署" class="headerlink" title="1. 部署"></a>1. 部署</h3><p>部署方面有两种选择，一种是用免费的github，另外一种是用自己的私有服务器。  </p><h4 id="1-1-使用Github"><a href="#1-1-使用Github" class="headerlink" title="1.1 使用Github"></a>1.1 使用Github</h4><p>github方面有很多教程，随便找找就应该会了。  </p><p>这里推荐几篇  </p><p><a href="https://hexo.io/zh-cn/docs/github-pages">官方教程，<del>不说人话</del></a>  </p><p><a href="https://zhuanlan.zhihu.com/p/26625249">民间教程，<del>太长不看</del></a>  </p><blockquote><p>哈哈嗝  </p></blockquote><h4 id="1-2-使用私有的服务器"><a href="#1-2-使用私有的服务器" class="headerlink" title="1.2 使用私有的服务器"></a>1.2 使用私有的服务器</h4><p>首先你需要一台服务器，<del>废话</del>  </p><p>服务器我采用Nginx部署静态页面  </p><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">官方教程</a>，我采用的是rsync插件，具体操作如下  </p><ol><li><p>下载<a href="https://www.itefix.net/cwrsync">rsync Windows版本</a></p></li><li><p>在博客根目录下使用<code>npm install hexo-deployer-rsync --save</code>命令安装插件</p></li><li><p>将bin目录加入Path</p></li><li><p>将服务器的ssh私钥(或者使用bin目录下的<code>ssh-keygen.exe</code>文件生成密钥)保存，存放到<code>C:\Users\&lt;Username&gt;\.ssh</code>目录下，取名为<code>id_rsa</code></p></li><li><p><code>_config.yml</code>添加如下配置</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">rsync</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">106.56</span><span class="number">.87</span><span class="number">.230</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">root:</span> <span class="string">/www/server/nginx/html</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br><span class="line">  <span class="attr">delete:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">verbose:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignore_errors:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p> 完成后输入命令<code>hexo d</code>即可运行部署命令</p></li><li><p>如果上述操作不成功，尝试以下操作手动部署，在hexo 博客目录下建立bat脚本</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rsync -r public/* root@xxx.xxx.xxx.xxx:&lt;你部署在nginx的文件路径&gt;</span></span><br><span class="line">rsync -r public/* root@106.56.87.230:/www/server/nginx/html</span><br></pre></td></tr></table></figure><p> 赶紧运行一下看有没有效果吧</p><p> <strong>注：如果存在多条指向<code>ssh.exe</code>的路径可能会引起连接不上主机的异常，使用<code>where ssh</code>命令可以查询是否存在多条路径指向<code>ssh</code>，如果存在，请删除多余的路径，只保留rsync bin目录下的<code>ssh.exe</code></strong></p></li></ol><h3 id="2-插件习惯"><a href="#2-插件习惯" class="headerlink" title="2. 插件习惯"></a>2. 插件习惯</h3><p>想要本地使用Typora编辑加预览，又想在部署后直接可用，可参考以下配置  </p><p>在<code>_config.yml</code>中更改<code>post_asset_folder: true</code> <a href="https://hexo.io/zh-cn/docs/asset-folders">效果说明</a>  </p><p>下载安装这个插件<a href="https://github.com/cocowool/hexo-image-link">hexo-image-link</a>  </p><p><strong>原文档有错误，MD文件中插入图片时请使用<code>！[label](&lt;与文件名同名的文件夹&gt;/image-name.jpg)</code>不要加<code>./</code></strong>  </p><blockquote><p><del>好了，你已经学会了建站的基础技巧，快去建立自己的博客网站吧，嗯?</del></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 建站教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
